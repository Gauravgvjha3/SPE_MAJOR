{"ast":null,"code":"import fetch from 'isomorphic-fetch';\nimport { API } from '../config';\nimport queryString from 'query-string';\nimport { isAuth, handleResponse } from './auth'; //Done already\n\nexport const createBlog = (blog, token) => {\n  console.log(`Creat blog called`);\n  let createBlogEndpoint;\n\n  if (isAuth() && isAuth().role === 1) {\n    createBlogEndpoint = `${API}/blog`;\n  } else if (isAuth() && isAuth().role === 0) {\n    createBlogEndpoint = `${API}/user/blog`;\n  }\n\n  return fetch(`${createBlogEndpoint}`, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      Authorization: `Bearer ${token}`\n    },\n    body: blog\n  }).then(response => {\n    handleResponse(response);\n    return response.json();\n  }).catch(err => console.log(err));\n}; //Done\n\nexport const listBlogsWithCategoriesAndTags = (skip, limit, userid) => {\n  console.log(`List blog with Categories called  with ${skip},${limit},${userid}`);\n  const data = {\n    limit,\n    skip,\n    userid\n  };\n  return fetch(`${API}/blogs-categories-tags`, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(data)\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n};\nexport const singleBlog = (slug = undefined, userid) => {\n  console.log(`Single blogsasasasasas called wiht slug ${slug} with userid ${userid}`);\n\n  let userid1 = isAuth() && isAuth()._id;\n\n  console.log(`printig Single ${userid1}`);\n  return fetch(`${API}/blog/${slug}/${userid}`, {\n    method: 'GET'\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n};\nexport const listRelated = (blog, userid) => {\n  console.log(`list related called ${userid}`);\n  return fetch(`${API}/blogs/related`, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(blog)\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n}; //\n\nexport const list = username => {\n  console.log(`LisT called ${username}`);\n  let listBlogsEndpoint;\n\n  if (username) {\n    listBlogsEndpoint = `${API}/${username}/blogs`;\n  } else {\n    listBlogsEndpoint = `${API}/blogs`;\n  }\n\n  return fetch(`${listBlogsEndpoint}`, {\n    method: 'GET'\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n}; //\n\nexport const removeBlog = (slug, token) => {\n  console.log(`remove blog called`);\n  let deleteBlogEndpoint;\n\n  if (isAuth() && isAuth().role === 1) {\n    deleteBlogEndpoint = `${API}/blog/${slug}`;\n  } else if (isAuth() && isAuth().role === 0) {\n    deleteBlogEndpoint = `${API}/user/blog/${slug}`;\n  }\n\n  return fetch(`${deleteBlogEndpoint}`, {\n    method: 'DELETE',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${token}`\n    }\n  }).then(response => {\n    handleResponse(response);\n    return response.json();\n  }).catch(err => console.log(err));\n}; //\n\nexport const updateBlog = (blog, token, slug) => {\n  let updateBlogEndpoint;\n\n  if (isAuth() && isAuth().role === 1) {\n    updateBlogEndpoint = `${API}/blog/${slug}`;\n  } else if (isAuth() && isAuth().role === 0) {\n    updateBlogEndpoint = `${API}/user/blog/${slug}`;\n  }\n\n  return fetch(`${updateBlogEndpoint}`, {\n    method: 'PUT',\n    headers: {\n      Accept: 'application/json',\n      Authorization: `Bearer ${token}`\n    },\n    body: blog\n  }).then(response => {\n    handleResponse(response);\n    return response.json();\n  }).catch(err => console.log(err));\n};\nexport const listSearch = params => {\n  console.log('search params', params);\n  let query = queryString.stringify(params);\n  console.log('query params', query);\n  return fetch(`${API}/blogs/search?${query}`, {\n    method: 'GET'\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n};","map":{"version":3,"sources":["/home/jay/Desktop/node/SPE_MAJOR/frontend/actions/blog.js"],"names":["fetch","API","queryString","isAuth","handleResponse","createBlog","blog","token","console","log","createBlogEndpoint","role","method","headers","Accept","Authorization","body","then","response","json","catch","err","listBlogsWithCategoriesAndTags","skip","limit","userid","data","JSON","stringify","singleBlog","slug","undefined","userid1","_id","listRelated","list","username","listBlogsEndpoint","removeBlog","deleteBlogEndpoint","updateBlog","updateBlogEndpoint","listSearch","params","query"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,kBAAlB;AACA,SAASC,GAAT,QAAoB,WAApB;AACA,OAAOC,WAAP,MAAwB,cAAxB;AACA,SAASC,MAAT,EAAiBC,cAAjB,QAAuC,QAAvC,C,CAEA;;AACA,OAAO,MAAMC,UAAU,GAAG,CAACC,IAAD,EAAOC,KAAP,KAAiB;AACvCC,EAAAA,OAAO,CAACC,GAAR,CAAa,mBAAb;AAEA,MAAIC,kBAAJ;;AAEA,MAAIP,MAAM,MAAMA,MAAM,GAAGQ,IAAT,KAAkB,CAAlC,EAAqC;AACjCD,IAAAA,kBAAkB,GAAI,GAAET,GAAI,OAA5B;AACH,GAFD,MAEO,IAAIE,MAAM,MAAMA,MAAM,GAAGQ,IAAT,KAAkB,CAAlC,EAAqC;AACxCD,IAAAA,kBAAkB,GAAI,GAAET,GAAI,YAA5B;AACH;;AAED,SAAOD,KAAK,CAAE,GAAEU,kBAAmB,EAAvB,EAA0B;AAClCE,IAAAA,MAAM,EAAE,MAD0B;AAElCC,IAAAA,OAAO,EAAE;AACLC,MAAAA,MAAM,EAAE,kBADH;AAELC,MAAAA,aAAa,EAAG,UAASR,KAAM;AAF1B,KAFyB;AAMlCS,IAAAA,IAAI,EAAEV;AAN4B,GAA1B,CAAL,CAQFW,IARE,CAQGC,QAAQ,IAAI;AACdd,IAAAA,cAAc,CAACc,QAAD,CAAd;AACA,WAAOA,QAAQ,CAACC,IAAT,EAAP;AACH,GAXE,EAYFC,KAZE,CAYIC,GAAG,IAAIb,OAAO,CAACC,GAAR,CAAYY,GAAZ,CAZX,CAAP;AAaH,CAxBM,C,CA0BP;;AACA,OAAO,MAAMC,8BAA8B,GAAG,CAACC,IAAD,EAAOC,KAAP,EAAaC,MAAb,KAAwB;AAClEjB,EAAAA,OAAO,CAACC,GAAR,CAAa,0CAAyCc,IAAK,IAAGC,KAAM,IAAGC,MAAO,EAA9E;AACA,QAAMC,IAAI,GAAG;AACTF,IAAAA,KADS;AAETD,IAAAA,IAFS;AAGTE,IAAAA;AAHS,GAAb;AAKA,SAAOzB,KAAK,CAAE,GAAEC,GAAI,wBAAR,EAAiC;AACzCW,IAAAA,MAAM,EAAE,MADiC;AAEzCC,IAAAA,OAAO,EAAE;AACLC,MAAAA,MAAM,EAAE,kBADH;AAEL,sBAAgB;AAFX,KAFgC;AAMzCE,IAAAA,IAAI,EAAEW,IAAI,CAACC,SAAL,CAAeF,IAAf;AANmC,GAAjC,CAAL,CAQFT,IARE,CAQGC,QAAQ,IAAI;AACd,WAAOA,QAAQ,CAACC,IAAT,EAAP;AACH,GAVE,EAWFC,KAXE,CAWIC,GAAG,IAAIb,OAAO,CAACC,GAAR,CAAYY,GAAZ,CAXX,CAAP;AAYH,CAnBM;AAsBP,OAAO,MAAMQ,UAAU,GAAG,CAACC,IAAI,GAAGC,SAAR,EAAkBN,MAAlB,KAA6B;AACnDjB,EAAAA,OAAO,CAACC,GAAR,CAAa,2CAA0CqB,IAAK,gBAAeL,MAAO,EAAlF;;AACA,MAAIO,OAAO,GAAC7B,MAAM,MAAMA,MAAM,GAAG8B,GAAjC;;AACAzB,EAAAA,OAAO,CAACC,GAAR,CAAa,kBAAiBuB,OAAQ,EAAtC;AACA,SAAOhC,KAAK,CAAE,GAAEC,GAAI,SAAQ6B,IAAK,IAAGL,MAAO,EAA/B,EAAkC;AAC1Cb,IAAAA,MAAM,EAAE;AADkC,GAAlC,CAAL,CAGFK,IAHE,CAGGC,QAAQ,IAAI;AACd,WAAOA,QAAQ,CAACC,IAAT,EAAP;AACH,GALE,EAMFC,KANE,CAMIC,GAAG,IAAIb,OAAO,CAACC,GAAR,CAAYY,GAAZ,CANX,CAAP;AAOH,CAXM;AAcP,OAAO,MAAMa,WAAW,GAAG,CAAC5B,IAAD,EAAMmB,MAAN,KAAiB;AACxCjB,EAAAA,OAAO,CAACC,GAAR,CAAa,uBAAsBgB,MAAO,EAA1C;AACA,SAAOzB,KAAK,CAAE,GAAEC,GAAI,gBAAR,EAAyB;AACjCW,IAAAA,MAAM,EAAE,MADyB;AAEjCC,IAAAA,OAAO,EAAE;AACLC,MAAAA,MAAM,EAAE,kBADH;AAEL,sBAAgB;AAFX,KAFwB;AAMjCE,IAAAA,IAAI,EAAEW,IAAI,CAACC,SAAL,CAAetB,IAAf;AAN2B,GAAzB,CAAL,CAQFW,IARE,CAQGC,QAAQ,IAAI;AACd,WAAOA,QAAQ,CAACC,IAAT,EAAP;AACH,GAVE,EAWFC,KAXE,CAWIC,GAAG,IAAIb,OAAO,CAACC,GAAR,CAAYY,GAAZ,CAXX,CAAP;AAYH,CAdM,C,CAgBP;;AACA,OAAO,MAAMc,IAAI,GAAGC,QAAQ,IAAI;AAC5B5B,EAAAA,OAAO,CAACC,GAAR,CAAa,eAAc2B,QAAS,EAApC;AACA,MAAIC,iBAAJ;;AAEA,MAAID,QAAJ,EAAc;AACVC,IAAAA,iBAAiB,GAAI,GAAEpC,GAAI,IAAGmC,QAAS,QAAvC;AACH,GAFD,MAEO;AACHC,IAAAA,iBAAiB,GAAI,GAAEpC,GAAI,QAA3B;AACH;;AAED,SAAOD,KAAK,CAAE,GAAEqC,iBAAkB,EAAtB,EAAyB;AACjCzB,IAAAA,MAAM,EAAE;AADyB,GAAzB,CAAL,CAGFK,IAHE,CAGGC,QAAQ,IAAI;AACd,WAAOA,QAAQ,CAACC,IAAT,EAAP;AACH,GALE,EAMFC,KANE,CAMIC,GAAG,IAAIb,OAAO,CAACC,GAAR,CAAYY,GAAZ,CANX,CAAP;AAOH,CAjBM,C,CAmBP;;AACA,OAAO,MAAMiB,UAAU,GAAG,CAACR,IAAD,EAAOvB,KAAP,KAAiB;AACvCC,EAAAA,OAAO,CAACC,GAAR,CAAa,oBAAb;AACA,MAAI8B,kBAAJ;;AAEA,MAAIpC,MAAM,MAAMA,MAAM,GAAGQ,IAAT,KAAkB,CAAlC,EAAqC;AACjC4B,IAAAA,kBAAkB,GAAI,GAAEtC,GAAI,SAAQ6B,IAAK,EAAzC;AACH,GAFD,MAEO,IAAI3B,MAAM,MAAMA,MAAM,GAAGQ,IAAT,KAAkB,CAAlC,EAAqC;AACxC4B,IAAAA,kBAAkB,GAAI,GAAEtC,GAAI,cAAa6B,IAAK,EAA9C;AACH;;AAED,SAAO9B,KAAK,CAAE,GAAEuC,kBAAmB,EAAvB,EAA0B;AAClC3B,IAAAA,MAAM,EAAE,QAD0B;AAElCC,IAAAA,OAAO,EAAE;AACLC,MAAAA,MAAM,EAAE,kBADH;AAEL,sBAAgB,kBAFX;AAGLC,MAAAA,aAAa,EAAG,UAASR,KAAM;AAH1B;AAFyB,GAA1B,CAAL,CAQFU,IARE,CAQGC,QAAQ,IAAI;AACdd,IAAAA,cAAc,CAACc,QAAD,CAAd;AACA,WAAOA,QAAQ,CAACC,IAAT,EAAP;AACH,GAXE,EAYFC,KAZE,CAYIC,GAAG,IAAIb,OAAO,CAACC,GAAR,CAAYY,GAAZ,CAZX,CAAP;AAaH,CAvBM,C,CAyBP;;AACA,OAAO,MAAMmB,UAAU,GAAG,CAAClC,IAAD,EAAOC,KAAP,EAAcuB,IAAd,KAAuB;AAC7C,MAAIW,kBAAJ;;AAEA,MAAItC,MAAM,MAAMA,MAAM,GAAGQ,IAAT,KAAkB,CAAlC,EAAqC;AACjC8B,IAAAA,kBAAkB,GAAI,GAAExC,GAAI,SAAQ6B,IAAK,EAAzC;AACH,GAFD,MAEO,IAAI3B,MAAM,MAAMA,MAAM,GAAGQ,IAAT,KAAkB,CAAlC,EAAqC;AACxC8B,IAAAA,kBAAkB,GAAI,GAAExC,GAAI,cAAa6B,IAAK,EAA9C;AACH;;AAED,SAAO9B,KAAK,CAAE,GAAEyC,kBAAmB,EAAvB,EAA0B;AAClC7B,IAAAA,MAAM,EAAE,KAD0B;AAElCC,IAAAA,OAAO,EAAE;AACLC,MAAAA,MAAM,EAAE,kBADH;AAELC,MAAAA,aAAa,EAAG,UAASR,KAAM;AAF1B,KAFyB;AAMlCS,IAAAA,IAAI,EAAEV;AAN4B,GAA1B,CAAL,CAQFW,IARE,CAQGC,QAAQ,IAAI;AACdd,IAAAA,cAAc,CAACc,QAAD,CAAd;AACA,WAAOA,QAAQ,CAACC,IAAT,EAAP;AACH,GAXE,EAYFC,KAZE,CAYIC,GAAG,IAAIb,OAAO,CAACC,GAAR,CAAYY,GAAZ,CAZX,CAAP;AAaH,CAtBM;AAwBP,OAAO,MAAMqB,UAAU,GAAGC,MAAM,IAAI;AAChCnC,EAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BkC,MAA7B;AACA,MAAIC,KAAK,GAAG1C,WAAW,CAAC0B,SAAZ,CAAsBe,MAAtB,CAAZ;AACAnC,EAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BmC,KAA5B;AACA,SAAO5C,KAAK,CAAE,GAAEC,GAAI,iBAAgB2C,KAAM,EAA9B,EAAiC;AACzChC,IAAAA,MAAM,EAAE;AADiC,GAAjC,CAAL,CAGFK,IAHE,CAGGC,QAAQ,IAAI;AACd,WAAOA,QAAQ,CAACC,IAAT,EAAP;AACH,GALE,EAMFC,KANE,CAMIC,GAAG,IAAIb,OAAO,CAACC,GAAR,CAAYY,GAAZ,CANX,CAAP;AAOH,CAXM","sourcesContent":["import fetch from 'isomorphic-fetch';\nimport { API } from '../config';\nimport queryString from 'query-string';\nimport { isAuth, handleResponse } from './auth';\n\n//Done already\nexport const createBlog = (blog, token) => {\n    console.log(`Creat blog called`);\n    \n    let createBlogEndpoint;\n\n    if (isAuth() && isAuth().role === 1) {\n        createBlogEndpoint = `${API}/blog`;\n    } else if (isAuth() && isAuth().role === 0) {\n        createBlogEndpoint = `${API}/user/blog`;\n    }\n\n    return fetch(`${createBlogEndpoint}`, {\n        method: 'POST',\n        headers: {\n            Accept: 'application/json',\n            Authorization: `Bearer ${token}`\n        },\n        body: blog\n    })\n        .then(response => {\n            handleResponse(response);\n            return response.json();\n        })\n        .catch(err => console.log(err));\n};\n\n//Done\nexport const listBlogsWithCategoriesAndTags = (skip, limit,userid) => {\n    console.log(`List blog with Categories called  with ${skip},${limit},${userid}`);\n    const data = {\n        limit,\n        skip,\n        userid\n    };\n    return fetch(`${API}/blogs-categories-tags`, {\n        method: 'POST',\n        headers: {\n            Accept: 'application/json',\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(data)\n    })\n        .then(response => {\n            return response.json();\n        })\n        .catch(err => console.log(err));\n};\n\n\nexport const singleBlog = (slug = undefined,userid) => {\n    console.log(`Single blogsasasasasas called wiht slug ${slug} with userid ${userid}`);\n    let userid1=isAuth() && isAuth()._id;\n    console.log(`printig Single ${userid1}`);\n    return fetch(`${API}/blog/${slug}/${userid}`, {\n        method: 'GET'\n    })\n        .then(response => {\n            return response.json();\n        })\n        .catch(err => console.log(err));\n};\n\n\nexport const listRelated = (blog,userid) => {\n    console.log(`list related called ${userid}`);\n    return fetch(`${API}/blogs/related`, {\n        method: 'POST',\n        headers: {\n            Accept: 'application/json',\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(blog)\n    })\n        .then(response => {\n            return response.json();\n        })\n        .catch(err => console.log(err));\n};\n\n//\nexport const list = username => {\n    console.log(`LisT called ${username}`);\n    let listBlogsEndpoint;\n\n    if (username) {\n        listBlogsEndpoint = `${API}/${username}/blogs`;\n    } else {\n        listBlogsEndpoint = `${API}/blogs`;\n    }\n\n    return fetch(`${listBlogsEndpoint}`, {\n        method: 'GET'\n    })\n        .then(response => {\n            return response.json();\n        })\n        .catch(err => console.log(err));\n};\n\n//\nexport const removeBlog = (slug, token) => {\n    console.log(`remove blog called`);\n    let deleteBlogEndpoint;\n\n    if (isAuth() && isAuth().role === 1) {\n        deleteBlogEndpoint = `${API}/blog/${slug}`;\n    } else if (isAuth() && isAuth().role === 0) {\n        deleteBlogEndpoint = `${API}/user/blog/${slug}`;\n    }\n\n    return fetch(`${deleteBlogEndpoint}`, {\n        method: 'DELETE',\n        headers: {\n            Accept: 'application/json',\n            'Content-Type': 'application/json',\n            Authorization: `Bearer ${token}`\n        }\n    })\n        .then(response => {\n            handleResponse(response);\n            return response.json();\n        })\n        .catch(err => console.log(err));\n};\n\n//\nexport const updateBlog = (blog, token, slug) => {\n    let updateBlogEndpoint;\n\n    if (isAuth() && isAuth().role === 1) {\n        updateBlogEndpoint = `${API}/blog/${slug}`;\n    } else if (isAuth() && isAuth().role === 0) {\n        updateBlogEndpoint = `${API}/user/blog/${slug}`;\n    }\n\n    return fetch(`${updateBlogEndpoint}`, {\n        method: 'PUT',\n        headers: {\n            Accept: 'application/json',\n            Authorization: `Bearer ${token}`\n        },\n        body: blog\n    })\n        .then(response => {\n            handleResponse(response);\n            return response.json();\n        })\n        .catch(err => console.log(err));\n};\n\nexport const listSearch = params => {\n    console.log('search params', params);\n    let query = queryString.stringify(params);\n    console.log('query params', query);\n    return fetch(`${API}/blogs/search?${query}`, {\n        method: 'GET'\n    })\n        .then(response => {\n            return response.json();\n        })\n        .catch(err => console.log(err));\n};\n"]},"metadata":{},"sourceType":"module"}