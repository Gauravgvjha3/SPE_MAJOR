{"ast":null,"code":"import fetch from 'isomorphic-fetch';\nimport { API } from '../config';\nimport queryString from 'query-string';\nimport { isAuth, handleResponse } from './auth';\nimport React from 'react';\nvar username1 = isAuth() && isAuth().username;\nconsole.log(\"printing the UserName: \".concat(username1));\nexport var createBlog = function createBlog(blog, token) {\n  var createBlogEndpoint;\n\n  if (isAuth() && isAuth().role === 1) {\n    createBlogEndpoint = \"\".concat(API, \"/blog\");\n  } else if (isAuth() && isAuth().role === 0) {\n    createBlogEndpoint = \"\".concat(API, \"/user/blog\");\n  }\n\n  return fetch(\"\".concat(createBlogEndpoint), {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      Authorization: \"Bearer \".concat(token)\n    },\n    body: blog\n  }).then(function (response) {\n    handleResponse(response);\n    return response.json();\n  })[\"catch\"](function (err) {\n    return console.log(err);\n  });\n};\nexport var listBlogsWithCategoriesAndTags = function listBlogsWithCategoriesAndTags(skip, limit) {\n  var data = {\n    limit: limit,\n    skip: skip\n  };\n  return fetch(\"\".concat(API, \"/\").concat(username1, \"/blogs-categories-tags\"), {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(data)\n  }).then(function (response) {\n    return response.json();\n  })[\"catch\"](function (err) {\n    return console.log(err);\n  });\n};\nexport var list = function list(username) {\n  var listBlogsEndpoint;\n\n  if (username) {\n    listBlogsEndpoint = \"\".concat(API, \"/\").concat(username, \"/blogs\");\n  } else {\n    listBlogsEndpoint = \"\".concat(API, \"/blogs\");\n  }\n\n  return fetch(\"\".concat(listBlogsEndpoint), {\n    method: 'GET'\n  }).then(function (response) {\n    return response.json();\n  })[\"catch\"](function (err) {\n    return console.log(err);\n  });\n};\nexport var singleBlog = function singleBlog(slug) {\n  return fetch(\"\".concat(API, \"/\").concat(username1, \"/blog/\").concat(slug), {\n    method: 'GET'\n  }).then(function (response) {\n    return response.json();\n  })[\"catch\"](function (err) {\n    return console.log(err);\n  });\n};\nexport var listRelated = function listRelated(blog) {\n  return fetch(\"\".concat(API, \"/blogs/related\"), {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(blog)\n  }).then(function (response) {\n    return response.json();\n  })[\"catch\"](function (err) {\n    return console.log(err);\n  });\n};\nexport var removeBlog = function removeBlog(slug, token) {\n  var deleteBlogEndpoint;\n\n  if (isAuth() && isAuth().role === 1) {\n    deleteBlogEndpoint = \"\".concat(API, \"/blog/\").concat(slug);\n  } else if (isAuth() && isAuth().role === 0) {\n    deleteBlogEndpoint = \"\".concat(API, \"/user/blog/\").concat(slug);\n  }\n\n  return fetch(\"\".concat(deleteBlogEndpoint), {\n    method: 'DELETE',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      Authorization: \"Bearer \".concat(token)\n    }\n  }).then(function (response) {\n    handleResponse(response);\n    return response.json();\n  })[\"catch\"](function (err) {\n    return console.log(err);\n  });\n};\nexport var updateBlog = function updateBlog(blog, token, slug) {\n  var updateBlogEndpoint;\n\n  if (isAuth() && isAuth().role === 1) {\n    updateBlogEndpoint = \"\".concat(API, \"/blog/\").concat(slug);\n  } else if (isAuth() && isAuth().role === 0) {\n    updateBlogEndpoint = \"\".concat(API, \"/user/blog/\").concat(slug);\n  }\n\n  return fetch(\"\".concat(updateBlogEndpoint), {\n    method: 'PUT',\n    headers: {\n      Accept: 'application/json',\n      Authorization: \"Bearer \".concat(token)\n    },\n    body: blog\n  }).then(function (response) {\n    handleResponse(response);\n    return response.json();\n  })[\"catch\"](function (err) {\n    return console.log(err);\n  });\n};\nexport var listSearch = function listSearch(params) {\n  console.log('search params', params);\n  var query = queryString.stringify(params);\n  console.log('query params', query);\n  return fetch(\"\".concat(API, \"/\").concat(username1, \"/blogs/search?\").concat(query), {\n    method: 'GET'\n  }).then(function (response) {\n    return response.json();\n  })[\"catch\"](function (err) {\n    return console.log(err);\n  });\n};","map":{"version":3,"sources":["/home/jay/Desktop/node/SPE_MAJOR/frontend/actions/blog.js"],"names":["fetch","API","queryString","isAuth","handleResponse","React","username1","username","console","log","createBlog","blog","token","createBlogEndpoint","role","method","headers","Accept","Authorization","body","then","response","json","err","listBlogsWithCategoriesAndTags","skip","limit","data","JSON","stringify","list","listBlogsEndpoint","singleBlog","slug","listRelated","removeBlog","deleteBlogEndpoint","updateBlog","updateBlogEndpoint","listSearch","params","query"],"mappings":"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","sourcesContent":["import fetch from 'isomorphic-fetch';\nimport { API } from '../config';\nimport queryString from 'query-string';\nimport { isAuth, handleResponse } from './auth';\nimport React from 'react';\n\n\n\nconst username1 = isAuth() && isAuth().username;\nconsole.log(`printing the UserName: ${username1}`);\n\nexport const createBlog = (blog, token) => {\n    let createBlogEndpoint;\n\n    if (isAuth() && isAuth().role === 1) {\n        createBlogEndpoint = `${API}/blog`;\n    } else if (isAuth() && isAuth().role === 0) {\n        createBlogEndpoint = `${API}/user/blog`;\n    }\n\n    return fetch(`${createBlogEndpoint}`, {\n        method: 'POST',\n        headers: {\n            Accept: 'application/json',\n            Authorization: `Bearer ${token}`\n        },\n        body: blog\n    })\n        .then(response => {\n            handleResponse(response);\n            return response.json();\n        })\n        .catch(err => console.log(err));\n};\n\nexport const listBlogsWithCategoriesAndTags = (skip, limit ) => {\n    const data = {\n        limit,\n        skip\n    };\n    return fetch(`${API}/${username1}/blogs-categories-tags`, {\n        method: 'POST',\n        headers: {\n            Accept: 'application/json',\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(data)\n    })\n        .then(response => {\n            return response.json();\n        })\n        .catch(err => console.log(err));\n};\nexport const list = username => {\n    let listBlogsEndpoint;\n\n    if (username) {\n        listBlogsEndpoint = `${API}/${username}/blogs`;\n    } else {\n        listBlogsEndpoint = `${API}/blogs`;\n    }\n\n    return fetch(`${listBlogsEndpoint}`, {\n        method: 'GET'\n    })\n        .then(response => {\n            return response.json();\n        })\n        .catch(err => console.log(err));\n};\nexport const singleBlog = slug => {\n    return fetch(`${API}/${username1}/blog/${slug}`, {\n        method: 'GET'\n    })\n        .then(response => {\n            return response.json();\n        })\n        .catch(err => console.log(err));\n};\n\nexport const listRelated = blog => {\n    return fetch(`${API}/blogs/related`, {\n        method: 'POST',\n        headers: {\n            Accept: 'application/json',\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(blog)\n    })\n        .then(response => {\n            return response.json();\n        })\n        .catch(err => console.log(err));\n};\n\n\n\nexport const removeBlog = (slug, token) => {\n    let deleteBlogEndpoint;\n\n    if (isAuth() && isAuth().role === 1) {\n        deleteBlogEndpoint = `${API}/blog/${slug}`;\n    } else if (isAuth() && isAuth().role === 0) {\n        deleteBlogEndpoint = `${API}/user/blog/${slug}`;\n    }\n\n    return fetch(`${deleteBlogEndpoint}`, {\n        method: 'DELETE',\n        headers: {\n            Accept: 'application/json',\n            'Content-Type': 'application/json',\n            Authorization: `Bearer ${token}`\n        }\n    })\n        .then(response => {\n            handleResponse(response);\n            return response.json();\n        })\n        .catch(err => console.log(err));\n};\n\nexport const updateBlog = (blog, token, slug) => {\n    let updateBlogEndpoint;\n\n    if (isAuth() && isAuth().role === 1) {\n        updateBlogEndpoint = `${API}/blog/${slug}`;\n    } else if (isAuth() && isAuth().role === 0) {\n        updateBlogEndpoint = `${API}/user/blog/${slug}`;\n    }\n\n    return fetch(`${updateBlogEndpoint}`, {\n        method: 'PUT',\n        headers: {\n            Accept: 'application/json',\n            Authorization: `Bearer ${token}`\n        },\n        body: blog\n    })\n        .then(response => {\n            handleResponse(response);\n            return response.json();\n        })\n        .catch(err => console.log(err));\n};\n\nexport const listSearch = params => {\n    console.log('search params', params);\n    let query = queryString.stringify(params);\n    console.log('query params', query);\n    return fetch(`${API}/${username1}/blogs/search?${query}`, {\n        method: 'GET'\n    })\n        .then(response => {\n            return response.json();\n        })\n        .catch(err => console.log(err));\n};\n"]},"metadata":{},"sourceType":"module"}